#!/usr/bin/env bash

set -ex

# ensure $0 is an absolute path
[ / = "${0::1}" ] || exec "$0" "$@"

self=${0##*/}
host=/host
patches=$host/patches
build=$host/$self

# run ourselves in a container, unless already inside
[ $build = "$0" ] ||
    {
        ! [ - = "${1::1}" ] ||
            {  # clue in the clueless
                echo Usage: $self [RAY_VERSION [DOCKER_IMAGE]]
                exit 1
            }
        # grab "default" versions from README.md
        RAY=$(sed -n '/Ray version/s/.*(`\([^`]*\)`.*/\1/p' README.md)
        PY=$(sed -n 's/.*Python \([^ ]*\) is used by default/\1/p' README.md)
        # spawn container
        exec docker run \
            --rm \
            --tty \
            --interactive \
            --volume "$PWD":$host \
            --env RAY=${1:-$RAY} \
            python:${2:-$PY} $build
    }

# inside container, upgrade pip
pip install --upgrade pip

# prep bazel, use Node.js LTS
curl -fsSL https://deb.nodesource.com/setup_lts.x | bash -
apt-get install -y nodejs
npm install -g @bazel/bazelisk

# fetch and optionally patch Ray
git clone -b ray-$RAY https://github.com/ray-project/ray
! [ -d $patches/$RAY ] ||
    for patch in $patches/$RAY/*.patch
    do patch -p1 < $patch
    done

# build dashboard frontend
cd /ray/python/ray/new_dashboard/client
npm install
npm ci
npm run build

# build wheel
cd /ray/python/
python setup.py bdist_wheel
mv -v dist/ray*whl $host
